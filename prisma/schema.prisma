generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                   @id @default(autoincrement())
  name        String
  email       String                @unique
  password    String
  cpf         String?               @unique
  cnpj        String?               @unique
  crm         String?               @unique
  nationalId  String?               @unique
  userRole    UserRole              @default(PARTICIPANT)
  refreshToken String?

  // Reverse relations
  eventRegistrations    EventRegistration[]
  activityRegistrations ActivityRegistration[]
  eventsOrganized       Event[]
}

model Event {
  id                  Int               @id @default(autoincrement())
  name                String
  organizerId         Int
  description         String
  format              Format
  location            String?
  userDocument        Boolean
  banner              String?
  eventType           EventType
  startDate           DateTime
  endDate             DateTime
  maxCapacity         Int?
  complementaryHours  Int?
  status              RegistrationStatus
  category            Category?

  // Reverse relations
  activities          Activity[]
  eventRegistrations  EventRegistration[]
  fields              EventField[]
  eventTags           EventTag[]
  userOrganizer           User    @relation(fields: [organizerId], references: [id])
}

model Activity {
  id                  Int       @id @default(autoincrement())
  name                String 
  description         String
  format              Format
  location            String?
  userDocument        Boolean
  banner              String?
  startDate           DateTime
  startTime           String
  activityType        ActivityType
  maxCapacity         Int
  complementaryHours  Int
  eventId             Int

  // Relation with Event and reverse
  event               Event    @relation(fields: [eventId], references: [id])
  activityRegistrations ActivityRegistration[]
  fields              ActivityField[]

  
}

model EventRegistration {
  id         Int      @id @default(autoincrement())
  eventId    Int
  userId     Int
  status     RegistrationStatus
  timestamp  DateTime @default(now())

  event      Event    @relation(fields: [eventId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  // Reverse relation for responses
  responses  EventFieldResponse[]
}

model ActivityRegistration {
  id           Int      @id @default(autoincrement())
  activityId   Int
  userId       Int
  status       RegistrationStatus
  timestamp    DateTime @default(now())

  activity     Activity @relation(fields: [activityId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  responses ActivityFieldResponse[]

}



model EventField {
  id          Int       @id @default(autoincrement())
  eventId     Int
  name        String    // Ex: "occupation", "income", "education level"
  type        FieldType // Ex: STRING, NUMBER, DATE, BOOLEAN
  required    Boolean   @default(false)

  event       Event     @relation(fields: [eventId], references: [id])
  
  // Reverse relation for responses
  responses   EventFieldResponse[]
}

model EventFieldResponse {
  id                Int      @id @default(autoincrement())
  eventRegistrationId Int
  eventFieldId      Int
  value             String   // Value stored as text; conversion performed in the application

  eventRegistration EventRegistration @relation(fields: [eventRegistrationId], references: [id])
  eventField        EventField        @relation(fields: [eventFieldId], references: [id])
}

model ActivityField {
  id          Int       @id @default(autoincrement())
  activityId  Int
  name        String    // Ex: "occupation", "income", "education level"
  type        FieldType // Ex: STRING, NUMBER, DATE, BOOLEAN
  required    Boolean   @default(false)

  activity    Activity  @relation(fields: [activityId], references: [id])
  
  // Reverse relation for responses
  responses   ActivityFieldResponse[]
}
model ActivityFieldResponse {
  id                Int      @id @default(autoincrement())
  activityRegistrationId Int
  activityFieldId   Int
  value             String   // Value stored as text; conversion performed in the application

  activityRegistration ActivityRegistration @relation(fields: [activityRegistrationId], references: [id])
  activityField        ActivityField        @relation(fields: [activityFieldId], references: [id])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Reverse relation with EventTag
  eventTags EventTag[]
}

model EventTag {
  eventId  Int
  tagId    Int

  event    Event @relation(fields: [eventId], references: [id])
  tag      Tag   @relation(fields: [tagId], references: [id])

  @@id([eventId, tagId])
}

enum Format {
  PRESENTIAL
  ONLINE
  HYBRID
}

enum EventType {
  SIMPLE
  LARGE
}

enum ActivityType {
  LECTURE
  SHORT_COURSE
  WORKSHOP
  SEMINAR
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum FieldType {
  STRING
  NUMBER
  DATE
  BOOLEAN
}

enum RegistrationState {
  ACTIVE 
  CLOSED 
  CANCELED
  DRAFT
}

enum UserRole {
  ADMIN
  ORGANIZER
  PARTICIPANT
}

enum Category {
  TALK
  LECTURE
  WORKSHOP
  SEMINAR
  SHORT_COURSE
  OTHER
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./prisma/dbml"
}
